// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an Airflow user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as airflow from "@pulumi/airflow";
 *
 * const example = new airflow.User("example", {
 *     email: "example",
 *     firstName: "example",
 *     lastName: "example",
 *     username: "example",
 *     password: "example",
 *     roles: [airflow_role.example.name],
 * });
 * ```
 *
 * ## Import
 *
 * Users can be imported using the user key. terraform
 *
 * ```sh
 *  $ pulumi import airflow:index/user:User example example
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'airflow:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Whether the user is active.
     */
    public /*out*/ readonly active!: pulumi.Output<boolean>;
    /**
     * The user's email
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * The number of times the login failed.
     */
    public /*out*/ readonly failedLoginCount!: pulumi.Output<number>;
    /**
     * The user firstname
     */
    public readonly firstName!: pulumi.Output<string>;
    /**
     * The user lastname
     */
    public readonly lastName!: pulumi.Output<string>;
    /**
     * The login count.
     */
    public /*out*/ readonly loginCount!: pulumi.Output<string>;
    /**
     * The user password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * A set of User roles to attach to the User.
     */
    public readonly roles!: pulumi.Output<string[]>;
    /**
     * The username
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["failedLoginCount"] = state ? state.failedLoginCount : undefined;
            resourceInputs["firstName"] = state ? state.firstName : undefined;
            resourceInputs["lastName"] = state ? state.lastName : undefined;
            resourceInputs["loginCount"] = state ? state.loginCount : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.firstName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firstName'");
            }
            if ((!args || args.lastName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lastName'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["firstName"] = args ? args.firstName : undefined;
            resourceInputs["lastName"] = args ? args.lastName : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["active"] = undefined /*out*/;
            resourceInputs["failedLoginCount"] = undefined /*out*/;
            resourceInputs["loginCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Whether the user is active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The user's email
     */
    email?: pulumi.Input<string>;
    /**
     * The number of times the login failed.
     */
    failedLoginCount?: pulumi.Input<number>;
    /**
     * The user firstname
     */
    firstName?: pulumi.Input<string>;
    /**
     * The user lastname
     */
    lastName?: pulumi.Input<string>;
    /**
     * The login count.
     */
    loginCount?: pulumi.Input<string>;
    /**
     * The user password.
     */
    password?: pulumi.Input<string>;
    /**
     * A set of User roles to attach to the User.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The username
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * The user's email
     */
    email: pulumi.Input<string>;
    /**
     * The user firstname
     */
    firstName: pulumi.Input<string>;
    /**
     * The user lastname
     */
    lastName: pulumi.Input<string>;
    /**
     * The user password.
     */
    password: pulumi.Input<string>;
    /**
     * A set of User roles to attach to the User.
     */
    roles: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The username
     */
    username: pulumi.Input<string>;
}
