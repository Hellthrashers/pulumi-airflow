// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an Airflow dag run resource (triggers a DAG).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as airflow from "@pulumi/airflow";
 *
 * const example = new airflow.DagRun("example", {
 *     conf: {
 *         example: "example",
 *     },
 *     dagId: "example",
 *     dagRunId: "example",
 * });
 * ```
 *
 * ## Import
 *
 * DAG Runs can be imported using the `dag_id:dag_run_id`. terraform
 *
 * ```sh
 *  $ pulumi import airflow:index/dagRun:DagRun default example:example
 * ```
 */
export class DagRun extends pulumi.CustomResource {
    /**
     * Get an existing DagRun resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DagRunState, opts?: pulumi.CustomResourceOptions): DagRun {
        return new DagRun(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'airflow:index/dagRun:DagRun';

    /**
     * Returns true if the given object is an instance of DagRun.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DagRun {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DagRun.__pulumiType;
    }

    /**
     * A map describing additional configuration parameters.
     */
    public readonly conf!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The DAG ID to run.
     */
    public readonly dagId!: pulumi.Output<string>;
    /**
     * The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
     */
    public readonly dagRunId!: pulumi.Output<string>;
    /**
     * The DAG state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a DagRun resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DagRunArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DagRunArgs | DagRunState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DagRunState | undefined;
            resourceInputs["conf"] = state ? state.conf : undefined;
            resourceInputs["dagId"] = state ? state.dagId : undefined;
            resourceInputs["dagRunId"] = state ? state.dagRunId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as DagRunArgs | undefined;
            if ((!args || args.dagId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dagId'");
            }
            resourceInputs["conf"] = args ? args.conf : undefined;
            resourceInputs["dagId"] = args ? args.dagId : undefined;
            resourceInputs["dagRunId"] = args ? args.dagRunId : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DagRun.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DagRun resources.
 */
export interface DagRunState {
    /**
     * A map describing additional configuration parameters.
     */
    conf?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The DAG ID to run.
     */
    dagId?: pulumi.Input<string>;
    /**
     * The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
     */
    dagRunId?: pulumi.Input<string>;
    /**
     * The DAG state.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DagRun resource.
 */
export interface DagRunArgs {
    /**
     * A map describing additional configuration parameters.
     */
    conf?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The DAG ID to run.
     */
    dagId: pulumi.Input<string>;
    /**
     * The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
     */
    dagRunId?: pulumi.Input<string>;
}
