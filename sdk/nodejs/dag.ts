// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an Airflow DAG.
 *
 * > Note this resource adpots an existing DAG and does not create a one, Also on delete the resource by default. A DAG is only deleted from state and not acutally deleted.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as airflow from "@pulumi/airflow";
 *
 * const example = new airflow.Dag("example", {
 *     dagId: "example",
 *     isPaused: false,
 * });
 * ```
 *
 * ## Import
 *
 * DAGs can be imported using the DAG Id. terraform
 *
 * ```sh
 *  $ pulumi import airflow:index/dag:Dag default example
 * ```
 */
export class Dag extends pulumi.CustomResource {
    /**
     * Get an existing Dag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DagState, opts?: pulumi.CustomResourceOptions): Dag {
        return new Dag(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'airflow:index/dag:Dag';

    /**
     * Returns true if the given object is an instance of Dag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dag {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dag.__pulumiType;
    }

    /**
     * The ID of the DAG.
     */
    public readonly dagId!: pulumi.Output<string>;
    public readonly deleteDag!: pulumi.Output<boolean | undefined>;
    /**
     * User-provided DAG description, which can consist of several sentences or paragraphs that describe DAG contents.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * The key containing the encrypted path to the file. Encryption and decryption take place only on the server. This prevents the client from reading an non-DAG file.
     */
    public /*out*/ readonly fileToken!: pulumi.Output<string>;
    /**
     * The absolute path to the file.
     */
    public /*out*/ readonly fileloc!: pulumi.Output<string>;
    /**
     * Whether the DAG is currently seen by the scheduler(s).
     */
    public /*out*/ readonly isActive!: pulumi.Output<boolean>;
    /**
     * Whether the DAG is paused.
     */
    public readonly isPaused!: pulumi.Output<boolean>;
    /**
     * Whether the DAG is SubDAG.
     */
    public /*out*/ readonly isSubdag!: pulumi.Output<boolean>;
    /**
     * If the DAG is SubDAG then it is the top level DAG identifier. Otherwise, null.
     */
    public /*out*/ readonly rootDagId!: pulumi.Output<string>;

    /**
     * Create a Dag resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DagArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DagArgs | DagState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DagState | undefined;
            resourceInputs["dagId"] = state ? state.dagId : undefined;
            resourceInputs["deleteDag"] = state ? state.deleteDag : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fileToken"] = state ? state.fileToken : undefined;
            resourceInputs["fileloc"] = state ? state.fileloc : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["isPaused"] = state ? state.isPaused : undefined;
            resourceInputs["isSubdag"] = state ? state.isSubdag : undefined;
            resourceInputs["rootDagId"] = state ? state.rootDagId : undefined;
        } else {
            const args = argsOrState as DagArgs | undefined;
            if ((!args || args.dagId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dagId'");
            }
            if ((!args || args.isPaused === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isPaused'");
            }
            resourceInputs["dagId"] = args ? args.dagId : undefined;
            resourceInputs["deleteDag"] = args ? args.deleteDag : undefined;
            resourceInputs["isPaused"] = args ? args.isPaused : undefined;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["fileToken"] = undefined /*out*/;
            resourceInputs["fileloc"] = undefined /*out*/;
            resourceInputs["isActive"] = undefined /*out*/;
            resourceInputs["isSubdag"] = undefined /*out*/;
            resourceInputs["rootDagId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dag.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dag resources.
 */
export interface DagState {
    /**
     * The ID of the DAG.
     */
    dagId?: pulumi.Input<string>;
    deleteDag?: pulumi.Input<boolean>;
    /**
     * User-provided DAG description, which can consist of several sentences or paragraphs that describe DAG contents.
     */
    description?: pulumi.Input<string>;
    /**
     * The key containing the encrypted path to the file. Encryption and decryption take place only on the server. This prevents the client from reading an non-DAG file.
     */
    fileToken?: pulumi.Input<string>;
    /**
     * The absolute path to the file.
     */
    fileloc?: pulumi.Input<string>;
    /**
     * Whether the DAG is currently seen by the scheduler(s).
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Whether the DAG is paused.
     */
    isPaused?: pulumi.Input<boolean>;
    /**
     * Whether the DAG is SubDAG.
     */
    isSubdag?: pulumi.Input<boolean>;
    /**
     * If the DAG is SubDAG then it is the top level DAG identifier. Otherwise, null.
     */
    rootDagId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Dag resource.
 */
export interface DagArgs {
    /**
     * The ID of the DAG.
     */
    dagId: pulumi.Input<string>;
    deleteDag?: pulumi.Input<boolean>;
    /**
     * Whether the DAG is paused.
     */
    isPaused: pulumi.Input<boolean>;
}
