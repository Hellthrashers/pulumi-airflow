// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { DagArgs, DagState } from "./dag";
export type Dag = import("./dag").Dag;
export const Dag: typeof import("./dag").Dag = null as any;
utilities.lazyLoad(exports, ["Dag"], () => require("./dag"));

export { DagRunArgs, DagRunState } from "./dagRun";
export type DagRun = import("./dagRun").DagRun;
export const DagRun: typeof import("./dagRun").DagRun = null as any;
utilities.lazyLoad(exports, ["DagRun"], () => require("./dagRun"));

export { PoolArgs, PoolState } from "./pool";
export type Pool = import("./pool").Pool;
export const Pool: typeof import("./pool").Pool = null as any;
utilities.lazyLoad(exports, ["Pool"], () => require("./pool"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { VariableArgs, VariableState } from "./variable";
export type Variable = import("./variable").Variable;
export const Variable: typeof import("./variable").Variable = null as any;
utilities.lazyLoad(exports, ["Variable"], () => require("./variable"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "airflow:index/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "airflow:index/dag:Dag":
                return new Dag(name, <any>undefined, { urn })
            case "airflow:index/dagRun:DagRun":
                return new DagRun(name, <any>undefined, { urn })
            case "airflow:index/pool:Pool":
                return new Pool(name, <any>undefined, { urn })
            case "airflow:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "airflow:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "airflow:index/variable:Variable":
                return new Variable(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("airflow", "index/connection", _module)
pulumi.runtime.registerResourceModule("airflow", "index/dag", _module)
pulumi.runtime.registerResourceModule("airflow", "index/dagRun", _module)
pulumi.runtime.registerResourceModule("airflow", "index/pool", _module)
pulumi.runtime.registerResourceModule("airflow", "index/role", _module)
pulumi.runtime.registerResourceModule("airflow", "index/user", _module)
pulumi.runtime.registerResourceModule("airflow", "index/variable", _module)
pulumi.runtime.registerResourcePackage("airflow", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:airflow") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
