// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airflow

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Airflow pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-airflow/sdk/go/airflow"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := airflow.NewPool(ctx, "example", &airflow.PoolArgs{
//				Slots: pulumi.Int(2),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Pools can be imported using the pool name. terraform
//
// ```sh
//
//	$ pulumi import airflow:index/pool:Pool default example
//
// ```
type Pool struct {
	pulumi.CustomResourceState

	// The name of pool.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of slots used by running/queued tasks at the moment.
	OccupiedSlots pulumi.IntOutput `pulumi:"occupiedSlots"`
	// The number of free slots at the moment.
	OpenSlots pulumi.IntOutput `pulumi:"openSlots"`
	// The number of slots used by queued tasks at the moment.
	QueuedSlots pulumi.IntOutput `pulumi:"queuedSlots"`
	// The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
	Slots pulumi.IntOutput `pulumi:"slots"`
	// The number of slots used by running tasks at the moment.
	UsedSlots pulumi.IntOutput `pulumi:"usedSlots"`
}

// NewPool registers a new resource with the given unique name, arguments, and options.
func NewPool(ctx *pulumi.Context,
	name string, args *PoolArgs, opts ...pulumi.ResourceOption) (*Pool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Slots == nil {
		return nil, errors.New("invalid value for required argument 'Slots'")
	}
	var resource Pool
	err := ctx.RegisterResource("airflow:index/pool:Pool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPool gets an existing Pool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PoolState, opts ...pulumi.ResourceOption) (*Pool, error) {
	var resource Pool
	err := ctx.ReadResource("airflow:index/pool:Pool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pool resources.
type poolState struct {
	// The name of pool.
	Name *string `pulumi:"name"`
	// The number of slots used by running/queued tasks at the moment.
	OccupiedSlots *int `pulumi:"occupiedSlots"`
	// The number of free slots at the moment.
	OpenSlots *int `pulumi:"openSlots"`
	// The number of slots used by queued tasks at the moment.
	QueuedSlots *int `pulumi:"queuedSlots"`
	// The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
	Slots *int `pulumi:"slots"`
	// The number of slots used by running tasks at the moment.
	UsedSlots *int `pulumi:"usedSlots"`
}

type PoolState struct {
	// The name of pool.
	Name pulumi.StringPtrInput
	// The number of slots used by running/queued tasks at the moment.
	OccupiedSlots pulumi.IntPtrInput
	// The number of free slots at the moment.
	OpenSlots pulumi.IntPtrInput
	// The number of slots used by queued tasks at the moment.
	QueuedSlots pulumi.IntPtrInput
	// The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
	Slots pulumi.IntPtrInput
	// The number of slots used by running tasks at the moment.
	UsedSlots pulumi.IntPtrInput
}

func (PoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*poolState)(nil)).Elem()
}

type poolArgs struct {
	// The name of pool.
	Name *string `pulumi:"name"`
	// The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
	Slots int `pulumi:"slots"`
}

// The set of arguments for constructing a Pool resource.
type PoolArgs struct {
	// The name of pool.
	Name pulumi.StringPtrInput
	// The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
	Slots pulumi.IntInput
}

func (PoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*poolArgs)(nil)).Elem()
}

type PoolInput interface {
	pulumi.Input

	ToPoolOutput() PoolOutput
	ToPoolOutputWithContext(ctx context.Context) PoolOutput
}

func (*Pool) ElementType() reflect.Type {
	return reflect.TypeOf((**Pool)(nil)).Elem()
}

func (i *Pool) ToPoolOutput() PoolOutput {
	return i.ToPoolOutputWithContext(context.Background())
}

func (i *Pool) ToPoolOutputWithContext(ctx context.Context) PoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolOutput)
}

// PoolArrayInput is an input type that accepts PoolArray and PoolArrayOutput values.
// You can construct a concrete instance of `PoolArrayInput` via:
//
//	PoolArray{ PoolArgs{...} }
type PoolArrayInput interface {
	pulumi.Input

	ToPoolArrayOutput() PoolArrayOutput
	ToPoolArrayOutputWithContext(context.Context) PoolArrayOutput
}

type PoolArray []PoolInput

func (PoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pool)(nil)).Elem()
}

func (i PoolArray) ToPoolArrayOutput() PoolArrayOutput {
	return i.ToPoolArrayOutputWithContext(context.Background())
}

func (i PoolArray) ToPoolArrayOutputWithContext(ctx context.Context) PoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolArrayOutput)
}

// PoolMapInput is an input type that accepts PoolMap and PoolMapOutput values.
// You can construct a concrete instance of `PoolMapInput` via:
//
//	PoolMap{ "key": PoolArgs{...} }
type PoolMapInput interface {
	pulumi.Input

	ToPoolMapOutput() PoolMapOutput
	ToPoolMapOutputWithContext(context.Context) PoolMapOutput
}

type PoolMap map[string]PoolInput

func (PoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pool)(nil)).Elem()
}

func (i PoolMap) ToPoolMapOutput() PoolMapOutput {
	return i.ToPoolMapOutputWithContext(context.Background())
}

func (i PoolMap) ToPoolMapOutputWithContext(ctx context.Context) PoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolMapOutput)
}

type PoolOutput struct{ *pulumi.OutputState }

func (PoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pool)(nil)).Elem()
}

func (o PoolOutput) ToPoolOutput() PoolOutput {
	return o
}

func (o PoolOutput) ToPoolOutputWithContext(ctx context.Context) PoolOutput {
	return o
}

// The name of pool.
func (o PoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of slots used by running/queued tasks at the moment.
func (o PoolOutput) OccupiedSlots() pulumi.IntOutput {
	return o.ApplyT(func(v *Pool) pulumi.IntOutput { return v.OccupiedSlots }).(pulumi.IntOutput)
}

// The number of free slots at the moment.
func (o PoolOutput) OpenSlots() pulumi.IntOutput {
	return o.ApplyT(func(v *Pool) pulumi.IntOutput { return v.OpenSlots }).(pulumi.IntOutput)
}

// The number of slots used by queued tasks at the moment.
func (o PoolOutput) QueuedSlots() pulumi.IntOutput {
	return o.ApplyT(func(v *Pool) pulumi.IntOutput { return v.QueuedSlots }).(pulumi.IntOutput)
}

// The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
func (o PoolOutput) Slots() pulumi.IntOutput {
	return o.ApplyT(func(v *Pool) pulumi.IntOutput { return v.Slots }).(pulumi.IntOutput)
}

// The number of slots used by running tasks at the moment.
func (o PoolOutput) UsedSlots() pulumi.IntOutput {
	return o.ApplyT(func(v *Pool) pulumi.IntOutput { return v.UsedSlots }).(pulumi.IntOutput)
}

type PoolArrayOutput struct{ *pulumi.OutputState }

func (PoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pool)(nil)).Elem()
}

func (o PoolArrayOutput) ToPoolArrayOutput() PoolArrayOutput {
	return o
}

func (o PoolArrayOutput) ToPoolArrayOutputWithContext(ctx context.Context) PoolArrayOutput {
	return o
}

func (o PoolArrayOutput) Index(i pulumi.IntInput) PoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pool {
		return vs[0].([]*Pool)[vs[1].(int)]
	}).(PoolOutput)
}

type PoolMapOutput struct{ *pulumi.OutputState }

func (PoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pool)(nil)).Elem()
}

func (o PoolMapOutput) ToPoolMapOutput() PoolMapOutput {
	return o
}

func (o PoolMapOutput) ToPoolMapOutputWithContext(ctx context.Context) PoolMapOutput {
	return o
}

func (o PoolMapOutput) MapIndex(k pulumi.StringInput) PoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pool {
		return vs[0].(map[string]*Pool)[vs[1].(string)]
	}).(PoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PoolInput)(nil)).Elem(), &Pool{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolArrayInput)(nil)).Elem(), PoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolMapInput)(nil)).Elem(), PoolMap{})
	pulumi.RegisterOutputType(PoolOutput{})
	pulumi.RegisterOutputType(PoolArrayOutput{})
	pulumi.RegisterOutputType(PoolMapOutput{})
}
