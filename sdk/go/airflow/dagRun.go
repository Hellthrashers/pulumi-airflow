// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airflow

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Airflow dag run resource (triggers a DAG).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/Hellthrashers/pulumi-airflow/sdk/go/airflow"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := airflow.NewDagRun(ctx, "example", &airflow.DagRunArgs{
//				Conf: pulumi.StringMap{
//					"example": pulumi.String("example"),
//				},
//				DagId:    pulumi.String("example"),
//				DagRunId: pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DAG Runs can be imported using the `dag_id:dag_run_id`. terraform
//
// ```sh
//
//	$ pulumi import airflow:index/dagRun:DagRun default example:example
//
// ```
type DagRun struct {
	pulumi.CustomResourceState

	// A map describing additional configuration parameters.
	Conf pulumi.StringMapOutput `pulumi:"conf"`
	// The DAG ID to run.
	DagId pulumi.StringOutput `pulumi:"dagId"`
	// The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
	DagRunId pulumi.StringOutput `pulumi:"dagRunId"`
	// The DAG state.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewDagRun registers a new resource with the given unique name, arguments, and options.
func NewDagRun(ctx *pulumi.Context,
	name string, args *DagRunArgs, opts ...pulumi.ResourceOption) (*DagRun, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DagId == nil {
		return nil, errors.New("invalid value for required argument 'DagId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DagRun
	err := ctx.RegisterResource("airflow:index/dagRun:DagRun", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDagRun gets an existing DagRun resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDagRun(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DagRunState, opts ...pulumi.ResourceOption) (*DagRun, error) {
	var resource DagRun
	err := ctx.ReadResource("airflow:index/dagRun:DagRun", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DagRun resources.
type dagRunState struct {
	// A map describing additional configuration parameters.
	Conf map[string]string `pulumi:"conf"`
	// The DAG ID to run.
	DagId *string `pulumi:"dagId"`
	// The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
	DagRunId *string `pulumi:"dagRunId"`
	// The DAG state.
	State *string `pulumi:"state"`
}

type DagRunState struct {
	// A map describing additional configuration parameters.
	Conf pulumi.StringMapInput
	// The DAG ID to run.
	DagId pulumi.StringPtrInput
	// The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
	DagRunId pulumi.StringPtrInput
	// The DAG state.
	State pulumi.StringPtrInput
}

func (DagRunState) ElementType() reflect.Type {
	return reflect.TypeOf((*dagRunState)(nil)).Elem()
}

type dagRunArgs struct {
	// A map describing additional configuration parameters.
	Conf map[string]string `pulumi:"conf"`
	// The DAG ID to run.
	DagId string `pulumi:"dagId"`
	// The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
	DagRunId *string `pulumi:"dagRunId"`
}

// The set of arguments for constructing a DagRun resource.
type DagRunArgs struct {
	// A map describing additional configuration parameters.
	Conf pulumi.StringMapInput
	// The DAG ID to run.
	DagId pulumi.StringInput
	// The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
	DagRunId pulumi.StringPtrInput
}

func (DagRunArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dagRunArgs)(nil)).Elem()
}

type DagRunInput interface {
	pulumi.Input

	ToDagRunOutput() DagRunOutput
	ToDagRunOutputWithContext(ctx context.Context) DagRunOutput
}

func (*DagRun) ElementType() reflect.Type {
	return reflect.TypeOf((**DagRun)(nil)).Elem()
}

func (i *DagRun) ToDagRunOutput() DagRunOutput {
	return i.ToDagRunOutputWithContext(context.Background())
}

func (i *DagRun) ToDagRunOutputWithContext(ctx context.Context) DagRunOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DagRunOutput)
}

// DagRunArrayInput is an input type that accepts DagRunArray and DagRunArrayOutput values.
// You can construct a concrete instance of `DagRunArrayInput` via:
//
//	DagRunArray{ DagRunArgs{...} }
type DagRunArrayInput interface {
	pulumi.Input

	ToDagRunArrayOutput() DagRunArrayOutput
	ToDagRunArrayOutputWithContext(context.Context) DagRunArrayOutput
}

type DagRunArray []DagRunInput

func (DagRunArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DagRun)(nil)).Elem()
}

func (i DagRunArray) ToDagRunArrayOutput() DagRunArrayOutput {
	return i.ToDagRunArrayOutputWithContext(context.Background())
}

func (i DagRunArray) ToDagRunArrayOutputWithContext(ctx context.Context) DagRunArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DagRunArrayOutput)
}

// DagRunMapInput is an input type that accepts DagRunMap and DagRunMapOutput values.
// You can construct a concrete instance of `DagRunMapInput` via:
//
//	DagRunMap{ "key": DagRunArgs{...} }
type DagRunMapInput interface {
	pulumi.Input

	ToDagRunMapOutput() DagRunMapOutput
	ToDagRunMapOutputWithContext(context.Context) DagRunMapOutput
}

type DagRunMap map[string]DagRunInput

func (DagRunMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DagRun)(nil)).Elem()
}

func (i DagRunMap) ToDagRunMapOutput() DagRunMapOutput {
	return i.ToDagRunMapOutputWithContext(context.Background())
}

func (i DagRunMap) ToDagRunMapOutputWithContext(ctx context.Context) DagRunMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DagRunMapOutput)
}

type DagRunOutput struct{ *pulumi.OutputState }

func (DagRunOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DagRun)(nil)).Elem()
}

func (o DagRunOutput) ToDagRunOutput() DagRunOutput {
	return o
}

func (o DagRunOutput) ToDagRunOutputWithContext(ctx context.Context) DagRunOutput {
	return o
}

// A map describing additional configuration parameters.
func (o DagRunOutput) Conf() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DagRun) pulumi.StringMapOutput { return v.Conf }).(pulumi.StringMapOutput)
}

// The DAG ID to run.
func (o DagRunOutput) DagId() pulumi.StringOutput {
	return o.ApplyT(func(v *DagRun) pulumi.StringOutput { return v.DagId }).(pulumi.StringOutput)
}

// The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
func (o DagRunOutput) DagRunId() pulumi.StringOutput {
	return o.ApplyT(func(v *DagRun) pulumi.StringOutput { return v.DagRunId }).(pulumi.StringOutput)
}

// The DAG state.
func (o DagRunOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DagRun) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type DagRunArrayOutput struct{ *pulumi.OutputState }

func (DagRunArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DagRun)(nil)).Elem()
}

func (o DagRunArrayOutput) ToDagRunArrayOutput() DagRunArrayOutput {
	return o
}

func (o DagRunArrayOutput) ToDagRunArrayOutputWithContext(ctx context.Context) DagRunArrayOutput {
	return o
}

func (o DagRunArrayOutput) Index(i pulumi.IntInput) DagRunOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DagRun {
		return vs[0].([]*DagRun)[vs[1].(int)]
	}).(DagRunOutput)
}

type DagRunMapOutput struct{ *pulumi.OutputState }

func (DagRunMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DagRun)(nil)).Elem()
}

func (o DagRunMapOutput) ToDagRunMapOutput() DagRunMapOutput {
	return o
}

func (o DagRunMapOutput) ToDagRunMapOutputWithContext(ctx context.Context) DagRunMapOutput {
	return o
}

func (o DagRunMapOutput) MapIndex(k pulumi.StringInput) DagRunOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DagRun {
		return vs[0].(map[string]*DagRun)[vs[1].(string)]
	}).(DagRunOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DagRunInput)(nil)).Elem(), &DagRun{})
	pulumi.RegisterInputType(reflect.TypeOf((*DagRunArrayInput)(nil)).Elem(), DagRunArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DagRunMapInput)(nil)).Elem(), DagRunMap{})
	pulumi.RegisterOutputType(DagRunOutput{})
	pulumi.RegisterOutputType(DagRunArrayOutput{})
	pulumi.RegisterOutputType(DagRunMapOutput{})
}
