// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airflow

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RoleAction struct {
	// The name of the permission.
	Action string `pulumi:"action"`
	// The name of the resource.
	Resource string `pulumi:"resource"`
}

// RoleActionInput is an input type that accepts RoleActionArgs and RoleActionOutput values.
// You can construct a concrete instance of `RoleActionInput` via:
//
//	RoleActionArgs{...}
type RoleActionInput interface {
	pulumi.Input

	ToRoleActionOutput() RoleActionOutput
	ToRoleActionOutputWithContext(context.Context) RoleActionOutput
}

type RoleActionArgs struct {
	// The name of the permission.
	Action pulumi.StringInput `pulumi:"action"`
	// The name of the resource.
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (RoleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAction)(nil)).Elem()
}

func (i RoleActionArgs) ToRoleActionOutput() RoleActionOutput {
	return i.ToRoleActionOutputWithContext(context.Background())
}

func (i RoleActionArgs) ToRoleActionOutputWithContext(ctx context.Context) RoleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleActionOutput)
}

// RoleActionArrayInput is an input type that accepts RoleActionArray and RoleActionArrayOutput values.
// You can construct a concrete instance of `RoleActionArrayInput` via:
//
//	RoleActionArray{ RoleActionArgs{...} }
type RoleActionArrayInput interface {
	pulumi.Input

	ToRoleActionArrayOutput() RoleActionArrayOutput
	ToRoleActionArrayOutputWithContext(context.Context) RoleActionArrayOutput
}

type RoleActionArray []RoleActionInput

func (RoleActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleAction)(nil)).Elem()
}

func (i RoleActionArray) ToRoleActionArrayOutput() RoleActionArrayOutput {
	return i.ToRoleActionArrayOutputWithContext(context.Background())
}

func (i RoleActionArray) ToRoleActionArrayOutputWithContext(ctx context.Context) RoleActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleActionArrayOutput)
}

type RoleActionOutput struct{ *pulumi.OutputState }

func (RoleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAction)(nil)).Elem()
}

func (o RoleActionOutput) ToRoleActionOutput() RoleActionOutput {
	return o
}

func (o RoleActionOutput) ToRoleActionOutputWithContext(ctx context.Context) RoleActionOutput {
	return o
}

// The name of the permission.
func (o RoleActionOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAction) string { return v.Action }).(pulumi.StringOutput)
}

// The name of the resource.
func (o RoleActionOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAction) string { return v.Resource }).(pulumi.StringOutput)
}

type RoleActionArrayOutput struct{ *pulumi.OutputState }

func (RoleActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleAction)(nil)).Elem()
}

func (o RoleActionArrayOutput) ToRoleActionArrayOutput() RoleActionArrayOutput {
	return o
}

func (o RoleActionArrayOutput) ToRoleActionArrayOutputWithContext(ctx context.Context) RoleActionArrayOutput {
	return o
}

func (o RoleActionArrayOutput) Index(i pulumi.IntInput) RoleActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleAction {
		return vs[0].([]RoleAction)[vs[1].(int)]
	}).(RoleActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleActionInput)(nil)).Elem(), RoleActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleActionArrayInput)(nil)).Elem(), RoleActionArray{})
	pulumi.RegisterOutputType(RoleActionOutput{})
	pulumi.RegisterOutputType(RoleActionArrayOutput{})
}
