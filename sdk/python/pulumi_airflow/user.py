# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 first_name: pulumi.Input[str],
                 last_name: pulumi.Input[str],
                 password: pulumi.Input[str],
                 roles: pulumi.Input[Sequence[pulumi.Input[str]]],
                 username: pulumi.Input[str]):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input[str] email: The user's email
        :param pulumi.Input[str] first_name: The user firstname
        :param pulumi.Input[str] last_name: The user lastname
        :param pulumi.Input[str] password: The user password.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: A set of User roles to attach to the User.
        :param pulumi.Input[str] username: The username
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        The user's email
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Input[str]:
        """
        The user firstname
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Input[str]:
        """
        The user lastname
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The user password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A set of User roles to attach to the User.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 failed_login_count: Optional[pulumi.Input[int]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 login_count: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input[bool] active: Whether the user is active.
        :param pulumi.Input[str] email: The user's email
        :param pulumi.Input[int] failed_login_count: The number of times the login failed.
        :param pulumi.Input[str] first_name: The user firstname
        :param pulumi.Input[str] last_name: The user lastname
        :param pulumi.Input[str] login_count: The login count.
        :param pulumi.Input[str] password: The user password.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: A set of User roles to attach to the User.
        :param pulumi.Input[str] username: The username
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if failed_login_count is not None:
            pulumi.set(__self__, "failed_login_count", failed_login_count)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if login_count is not None:
            pulumi.set(__self__, "login_count", login_count)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user is active.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The user's email
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="failedLoginCount")
    def failed_login_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of times the login failed.
        """
        return pulumi.get(self, "failed_login_count")

    @failed_login_count.setter
    def failed_login_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failed_login_count", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user firstname
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user lastname
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter(name="loginCount")
    def login_count(self) -> Optional[pulumi.Input[str]]:
        """
        The login count.
        """
        return pulumi.get(self, "login_count")

    @login_count.setter
    def login_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_count", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The user password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of User roles to attach to the User.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an Airflow user.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_airflow as airflow

        example = airflow.User("example",
            email="example",
            first_name="example",
            last_name="example",
            username="example",
            password="example",
            roles=[airflow_role["example"]["name"]])
        ```

        ## Import

        Users can be imported using the user key. terraform

        ```sh
         $ pulumi import airflow:index/user:User example example
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email: The user's email
        :param pulumi.Input[str] first_name: The user firstname
        :param pulumi.Input[str] last_name: The user lastname
        :param pulumi.Input[str] password: The user password.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: A set of User roles to attach to the User.
        :param pulumi.Input[str] username: The username
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an Airflow user.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_airflow as airflow

        example = airflow.User("example",
            email="example",
            first_name="example",
            last_name="example",
            username="example",
            password="example",
            roles=[airflow_role["example"]["name"]])
        ```

        ## Import

        Users can be imported using the user key. terraform

        ```sh
         $ pulumi import airflow:index/user:User example example
        ```

        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            if first_name is None and not opts.urn:
                raise TypeError("Missing required property 'first_name'")
            __props__.__dict__["first_name"] = first_name
            if last_name is None and not opts.urn:
                raise TypeError("Missing required property 'last_name'")
            __props__.__dict__["last_name"] = last_name
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = password
            if roles is None and not opts.urn:
                raise TypeError("Missing required property 'roles'")
            __props__.__dict__["roles"] = roles
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["active"] = None
            __props__.__dict__["failed_login_count"] = None
            __props__.__dict__["login_count"] = None
        super(User, __self__).__init__(
            'airflow:index/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[bool]] = None,
            email: Optional[pulumi.Input[str]] = None,
            failed_login_count: Optional[pulumi.Input[int]] = None,
            first_name: Optional[pulumi.Input[str]] = None,
            last_name: Optional[pulumi.Input[str]] = None,
            login_count: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Whether the user is active.
        :param pulumi.Input[str] email: The user's email
        :param pulumi.Input[int] failed_login_count: The number of times the login failed.
        :param pulumi.Input[str] first_name: The user firstname
        :param pulumi.Input[str] last_name: The user lastname
        :param pulumi.Input[str] login_count: The login count.
        :param pulumi.Input[str] password: The user password.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: A set of User roles to attach to the User.
        :param pulumi.Input[str] username: The username
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["active"] = active
        __props__.__dict__["email"] = email
        __props__.__dict__["failed_login_count"] = failed_login_count
        __props__.__dict__["first_name"] = first_name
        __props__.__dict__["last_name"] = last_name
        __props__.__dict__["login_count"] = login_count
        __props__.__dict__["password"] = password
        __props__.__dict__["roles"] = roles
        __props__.__dict__["username"] = username
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output[bool]:
        """
        Whether the user is active.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        The user's email
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="failedLoginCount")
    def failed_login_count(self) -> pulumi.Output[int]:
        """
        The number of times the login failed.
        """
        return pulumi.get(self, "failed_login_count")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Output[str]:
        """
        The user firstname
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Output[str]:
        """
        The user lastname
        """
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="loginCount")
    def login_count(self) -> pulumi.Output[str]:
        """
        The login count.
        """
        return pulumi.get(self, "login_count")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        The user password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Sequence[str]]:
        """
        A set of User roles to attach to the User.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        The username
        """
        return pulumi.get(self, "username")

