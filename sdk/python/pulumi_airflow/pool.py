# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PoolArgs', 'Pool']

@pulumi.input_type
class PoolArgs:
    def __init__(__self__, *,
                 slots: pulumi.Input[int],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Pool resource.
        :param pulumi.Input[int] slots: The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
        :param pulumi.Input[str] name: The name of pool.
        """
        pulumi.set(__self__, "slots", slots)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def slots(self) -> pulumi.Input[int]:
        """
        The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: pulumi.Input[int]):
        pulumi.set(self, "slots", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of pool.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _PoolState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 occupied_slots: Optional[pulumi.Input[int]] = None,
                 open_slots: Optional[pulumi.Input[int]] = None,
                 queued_slots: Optional[pulumi.Input[int]] = None,
                 slots: Optional[pulumi.Input[int]] = None,
                 used_slots: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Pool resources.
        :param pulumi.Input[str] name: The name of pool.
        :param pulumi.Input[int] occupied_slots: The number of slots used by running/queued tasks at the moment.
        :param pulumi.Input[int] open_slots: The number of free slots at the moment.
        :param pulumi.Input[int] queued_slots: The number of slots used by queued tasks at the moment.
        :param pulumi.Input[int] slots: The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
        :param pulumi.Input[int] used_slots: The number of slots used by running tasks at the moment.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if occupied_slots is not None:
            pulumi.set(__self__, "occupied_slots", occupied_slots)
        if open_slots is not None:
            pulumi.set(__self__, "open_slots", open_slots)
        if queued_slots is not None:
            pulumi.set(__self__, "queued_slots", queued_slots)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)
        if used_slots is not None:
            pulumi.set(__self__, "used_slots", used_slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of pool.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="occupiedSlots")
    def occupied_slots(self) -> Optional[pulumi.Input[int]]:
        """
        The number of slots used by running/queued tasks at the moment.
        """
        return pulumi.get(self, "occupied_slots")

    @occupied_slots.setter
    def occupied_slots(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "occupied_slots", value)

    @property
    @pulumi.getter(name="openSlots")
    def open_slots(self) -> Optional[pulumi.Input[int]]:
        """
        The number of free slots at the moment.
        """
        return pulumi.get(self, "open_slots")

    @open_slots.setter
    def open_slots(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "open_slots", value)

    @property
    @pulumi.getter(name="queuedSlots")
    def queued_slots(self) -> Optional[pulumi.Input[int]]:
        """
        The number of slots used by queued tasks at the moment.
        """
        return pulumi.get(self, "queued_slots")

    @queued_slots.setter
    def queued_slots(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "queued_slots", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slots", value)

    @property
    @pulumi.getter(name="usedSlots")
    def used_slots(self) -> Optional[pulumi.Input[int]]:
        """
        The number of slots used by running tasks at the moment.
        """
        return pulumi.get(self, "used_slots")

    @used_slots.setter
    def used_slots(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "used_slots", value)


class Pool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides an Airflow pool.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_airflow as airflow

        example = airflow.Pool("example", slots=2)
        ```

        ## Import

        Pools can be imported using the pool name. terraform

        ```sh
         $ pulumi import airflow:index/pool:Pool default example
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of pool.
        :param pulumi.Input[int] slots: The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an Airflow pool.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_airflow as airflow

        example = airflow.Pool("example", slots=2)
        ```

        ## Import

        Pools can be imported using the pool name. terraform

        ```sh
         $ pulumi import airflow:index/pool:Pool default example
        ```

        :param str resource_name: The name of the resource.
        :param PoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PoolArgs.__new__(PoolArgs)

            __props__.__dict__["name"] = name
            if slots is None and not opts.urn:
                raise TypeError("Missing required property 'slots'")
            __props__.__dict__["slots"] = slots
            __props__.__dict__["occupied_slots"] = None
            __props__.__dict__["open_slots"] = None
            __props__.__dict__["queued_slots"] = None
            __props__.__dict__["used_slots"] = None
        super(Pool, __self__).__init__(
            'airflow:index/pool:Pool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            occupied_slots: Optional[pulumi.Input[int]] = None,
            open_slots: Optional[pulumi.Input[int]] = None,
            queued_slots: Optional[pulumi.Input[int]] = None,
            slots: Optional[pulumi.Input[int]] = None,
            used_slots: Optional[pulumi.Input[int]] = None) -> 'Pool':
        """
        Get an existing Pool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of pool.
        :param pulumi.Input[int] occupied_slots: The number of slots used by running/queued tasks at the moment.
        :param pulumi.Input[int] open_slots: The number of free slots at the moment.
        :param pulumi.Input[int] queued_slots: The number of slots used by queued tasks at the moment.
        :param pulumi.Input[int] slots: The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
        :param pulumi.Input[int] used_slots: The number of slots used by running tasks at the moment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PoolState.__new__(_PoolState)

        __props__.__dict__["name"] = name
        __props__.__dict__["occupied_slots"] = occupied_slots
        __props__.__dict__["open_slots"] = open_slots
        __props__.__dict__["queued_slots"] = queued_slots
        __props__.__dict__["slots"] = slots
        __props__.__dict__["used_slots"] = used_slots
        return Pool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="occupiedSlots")
    def occupied_slots(self) -> pulumi.Output[int]:
        """
        The number of slots used by running/queued tasks at the moment.
        """
        return pulumi.get(self, "occupied_slots")

    @property
    @pulumi.getter(name="openSlots")
    def open_slots(self) -> pulumi.Output[int]:
        """
        The number of free slots at the moment.
        """
        return pulumi.get(self, "open_slots")

    @property
    @pulumi.getter(name="queuedSlots")
    def queued_slots(self) -> pulumi.Output[int]:
        """
        The number of slots used by queued tasks at the moment.
        """
        return pulumi.get(self, "queued_slots")

    @property
    @pulumi.getter
    def slots(self) -> pulumi.Output[int]:
        """
        The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
        """
        return pulumi.get(self, "slots")

    @property
    @pulumi.getter(name="usedSlots")
    def used_slots(self) -> pulumi.Output[int]:
        """
        The number of slots used by running tasks at the moment.
        """
        return pulumi.get(self, "used_slots")

