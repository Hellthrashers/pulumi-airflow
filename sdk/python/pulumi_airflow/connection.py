# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ConnectionArgs', 'Connection']

@pulumi.input_type
class ConnectionArgs:
    def __init__(__self__, *,
                 conn_type: pulumi.Input[str],
                 connection_id: pulumi.Input[str],
                 extra: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 login: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 schema: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Connection resource.
        :param pulumi.Input[str] conn_type: The connection type.
        :param pulumi.Input[str] connection_id: The connection ID.
        :param pulumi.Input[str] extra: Other values that cannot be put into another field, e.g. RSA keys.
        :param pulumi.Input[str] host: The host of the connection.
        :param pulumi.Input[str] login: The login of the connection.
        :param pulumi.Input[str] password: The paasword of the connection.
        :param pulumi.Input[int] port: The port of the connection.
        :param pulumi.Input[str] schema: The schema of the connection.
        """
        pulumi.set(__self__, "conn_type", conn_type)
        pulumi.set(__self__, "connection_id", connection_id)
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter(name="connType")
    def conn_type(self) -> pulumi.Input[str]:
        """
        The connection type.
        """
        return pulumi.get(self, "conn_type")

    @conn_type.setter
    def conn_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "conn_type", value)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Input[str]:
        """
        The connection ID.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter
    def extra(self) -> Optional[pulumi.Input[str]]:
        """
        Other values that cannot be put into another field, e.g. RSA keys.
        """
        return pulumi.get(self, "extra")

    @extra.setter
    def extra(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The host of the connection.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input[str]]:
        """
        The login of the connection.
        """
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The paasword of the connection.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port of the connection.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        """
        The schema of the connection.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)


@pulumi.input_type
class _ConnectionState:
    def __init__(__self__, *,
                 conn_type: Optional[pulumi.Input[str]] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 extra: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 login: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 schema: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Connection resources.
        :param pulumi.Input[str] conn_type: The connection type.
        :param pulumi.Input[str] connection_id: The connection ID.
        :param pulumi.Input[str] extra: Other values that cannot be put into another field, e.g. RSA keys.
        :param pulumi.Input[str] host: The host of the connection.
        :param pulumi.Input[str] login: The login of the connection.
        :param pulumi.Input[str] password: The paasword of the connection.
        :param pulumi.Input[int] port: The port of the connection.
        :param pulumi.Input[str] schema: The schema of the connection.
        """
        if conn_type is not None:
            pulumi.set(__self__, "conn_type", conn_type)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if extra is not None:
            pulumi.set(__self__, "extra", extra)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter(name="connType")
    def conn_type(self) -> Optional[pulumi.Input[str]]:
        """
        The connection type.
        """
        return pulumi.get(self, "conn_type")

    @conn_type.setter
    def conn_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conn_type", value)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[str]]:
        """
        The connection ID.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter
    def extra(self) -> Optional[pulumi.Input[str]]:
        """
        Other values that cannot be put into another field, e.g. RSA keys.
        """
        return pulumi.get(self, "extra")

    @extra.setter
    def extra(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The host of the connection.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input[str]]:
        """
        The login of the connection.
        """
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The paasword of the connection.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port of the connection.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        """
        The schema of the connection.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)


class Connection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conn_type: Optional[pulumi.Input[str]] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 extra: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 login: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an Airflow connection.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_airflow as airflow

        example = airflow.Connection("example",
            conn_type="example",
            connection_id="example")
        ```

        ## Import

        Connections can be imported using the connection key. terraform

        ```sh
         $ pulumi import airflow:index/connection:Connection default example
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] conn_type: The connection type.
        :param pulumi.Input[str] connection_id: The connection ID.
        :param pulumi.Input[str] extra: Other values that cannot be put into another field, e.g. RSA keys.
        :param pulumi.Input[str] host: The host of the connection.
        :param pulumi.Input[str] login: The login of the connection.
        :param pulumi.Input[str] password: The paasword of the connection.
        :param pulumi.Input[int] port: The port of the connection.
        :param pulumi.Input[str] schema: The schema of the connection.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an Airflow connection.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_airflow as airflow

        example = airflow.Connection("example",
            conn_type="example",
            connection_id="example")
        ```

        ## Import

        Connections can be imported using the connection key. terraform

        ```sh
         $ pulumi import airflow:index/connection:Connection default example
        ```

        :param str resource_name: The name of the resource.
        :param ConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conn_type: Optional[pulumi.Input[str]] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 extra: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 login: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectionArgs.__new__(ConnectionArgs)

            if conn_type is None and not opts.urn:
                raise TypeError("Missing required property 'conn_type'")
            __props__.__dict__["conn_type"] = conn_type
            if connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'connection_id'")
            __props__.__dict__["connection_id"] = connection_id
            __props__.__dict__["extra"] = extra
            __props__.__dict__["host"] = host
            __props__.__dict__["login"] = login
            __props__.__dict__["password"] = password
            __props__.__dict__["port"] = port
            __props__.__dict__["schema"] = schema
        super(Connection, __self__).__init__(
            'airflow:index/connection:Connection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            conn_type: Optional[pulumi.Input[str]] = None,
            connection_id: Optional[pulumi.Input[str]] = None,
            extra: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            login: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            schema: Optional[pulumi.Input[str]] = None) -> 'Connection':
        """
        Get an existing Connection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] conn_type: The connection type.
        :param pulumi.Input[str] connection_id: The connection ID.
        :param pulumi.Input[str] extra: Other values that cannot be put into another field, e.g. RSA keys.
        :param pulumi.Input[str] host: The host of the connection.
        :param pulumi.Input[str] login: The login of the connection.
        :param pulumi.Input[str] password: The paasword of the connection.
        :param pulumi.Input[int] port: The port of the connection.
        :param pulumi.Input[str] schema: The schema of the connection.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectionState.__new__(_ConnectionState)

        __props__.__dict__["conn_type"] = conn_type
        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["extra"] = extra
        __props__.__dict__["host"] = host
        __props__.__dict__["login"] = login
        __props__.__dict__["password"] = password
        __props__.__dict__["port"] = port
        __props__.__dict__["schema"] = schema
        return Connection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connType")
    def conn_type(self) -> pulumi.Output[str]:
        """
        The connection type.
        """
        return pulumi.get(self, "conn_type")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[str]:
        """
        The connection ID.
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter
    def extra(self) -> pulumi.Output[Optional[str]]:
        """
        Other values that cannot be put into another field, e.g. RSA keys.
        """
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[Optional[str]]:
        """
        The host of the connection.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def login(self) -> pulumi.Output[Optional[str]]:
        """
        The login of the connection.
        """
        return pulumi.get(self, "login")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        The paasword of the connection.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[int]]:
        """
        The port of the connection.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Output[Optional[str]]:
        """
        The schema of the connection.
        """
        return pulumi.get(self, "schema")

