# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DagRunArgs', 'DagRun']

@pulumi.input_type
class DagRunArgs:
    def __init__(__self__, *,
                 dag_id: pulumi.Input[str],
                 conf: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 dag_run_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DagRun resource.
        :param pulumi.Input[str] dag_id: The DAG ID to run.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] conf: A map describing additional configuration parameters.
        :param pulumi.Input[str] dag_run_id: The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
        """
        pulumi.set(__self__, "dag_id", dag_id)
        if conf is not None:
            pulumi.set(__self__, "conf", conf)
        if dag_run_id is not None:
            pulumi.set(__self__, "dag_run_id", dag_run_id)

    @property
    @pulumi.getter(name="dagId")
    def dag_id(self) -> pulumi.Input[str]:
        """
        The DAG ID to run.
        """
        return pulumi.get(self, "dag_id")

    @dag_id.setter
    def dag_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dag_id", value)

    @property
    @pulumi.getter
    def conf(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map describing additional configuration parameters.
        """
        return pulumi.get(self, "conf")

    @conf.setter
    def conf(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "conf", value)

    @property
    @pulumi.getter(name="dagRunId")
    def dag_run_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
        """
        return pulumi.get(self, "dag_run_id")

    @dag_run_id.setter
    def dag_run_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dag_run_id", value)


@pulumi.input_type
class _DagRunState:
    def __init__(__self__, *,
                 conf: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 dag_id: Optional[pulumi.Input[str]] = None,
                 dag_run_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DagRun resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] conf: A map describing additional configuration parameters.
        :param pulumi.Input[str] dag_id: The DAG ID to run.
        :param pulumi.Input[str] dag_run_id: The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
        :param pulumi.Input[str] state: The DAG state.
        """
        if conf is not None:
            pulumi.set(__self__, "conf", conf)
        if dag_id is not None:
            pulumi.set(__self__, "dag_id", dag_id)
        if dag_run_id is not None:
            pulumi.set(__self__, "dag_run_id", dag_run_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def conf(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map describing additional configuration parameters.
        """
        return pulumi.get(self, "conf")

    @conf.setter
    def conf(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "conf", value)

    @property
    @pulumi.getter(name="dagId")
    def dag_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DAG ID to run.
        """
        return pulumi.get(self, "dag_id")

    @dag_id.setter
    def dag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dag_id", value)

    @property
    @pulumi.getter(name="dagRunId")
    def dag_run_id(self) -> Optional[pulumi.Input[str]]:
        """
        The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
        """
        return pulumi.get(self, "dag_run_id")

    @dag_run_id.setter
    def dag_run_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dag_run_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The DAG state.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


class DagRun(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conf: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 dag_id: Optional[pulumi.Input[str]] = None,
                 dag_run_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an Airflow dag run resource (triggers a DAG).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_airflow as airflow

        example = airflow.DagRun("example",
            conf={
                "example": "example",
            },
            dag_id="example",
            dag_run_id="example")
        ```

        ## Import

        DAG Runs can be imported using the `dag_id:dag_run_id`. terraform

        ```sh
         $ pulumi import airflow:index/dagRun:DagRun default example:example
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] conf: A map describing additional configuration parameters.
        :param pulumi.Input[str] dag_id: The DAG ID to run.
        :param pulumi.Input[str] dag_run_id: The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DagRunArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an Airflow dag run resource (triggers a DAG).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_airflow as airflow

        example = airflow.DagRun("example",
            conf={
                "example": "example",
            },
            dag_id="example",
            dag_run_id="example")
        ```

        ## Import

        DAG Runs can be imported using the `dag_id:dag_run_id`. terraform

        ```sh
         $ pulumi import airflow:index/dagRun:DagRun default example:example
        ```

        :param str resource_name: The name of the resource.
        :param DagRunArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DagRunArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conf: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 dag_id: Optional[pulumi.Input[str]] = None,
                 dag_run_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DagRunArgs.__new__(DagRunArgs)

            __props__.__dict__["conf"] = conf
            if dag_id is None and not opts.urn:
                raise TypeError("Missing required property 'dag_id'")
            __props__.__dict__["dag_id"] = dag_id
            __props__.__dict__["dag_run_id"] = dag_run_id
            __props__.__dict__["state"] = None
        super(DagRun, __self__).__init__(
            'airflow:index/dagRun:DagRun',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            conf: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            dag_id: Optional[pulumi.Input[str]] = None,
            dag_run_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None) -> 'DagRun':
        """
        Get an existing DagRun resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] conf: A map describing additional configuration parameters.
        :param pulumi.Input[str] dag_id: The DAG ID to run.
        :param pulumi.Input[str] dag_run_id: The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
        :param pulumi.Input[str] state: The DAG state.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DagRunState.__new__(_DagRunState)

        __props__.__dict__["conf"] = conf
        __props__.__dict__["dag_id"] = dag_id
        __props__.__dict__["dag_run_id"] = dag_run_id
        __props__.__dict__["state"] = state
        return DagRun(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def conf(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A map describing additional configuration parameters.
        """
        return pulumi.get(self, "conf")

    @property
    @pulumi.getter(name="dagId")
    def dag_id(self) -> pulumi.Output[str]:
        """
        The DAG ID to run.
        """
        return pulumi.get(self, "dag_id")

    @property
    @pulumi.getter(name="dagRunId")
    def dag_run_id(self) -> pulumi.Output[str]:
        """
        The DAG Run ID. If a value is not passed, a random one will be generated based on execution date.
        """
        return pulumi.get(self, "dag_run_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The DAG state.
        """
        return pulumi.get(self, "state")

